
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model session
 */

export type session = {
  sessionId: string
  dateCreated: Date | null
}

/**
 * Model sessionRestaurant
 */

export type sessionRestaurant = {
  sessionId: string
  restaurantId: string | null
  votes: number | null
}

/**
 * Model sessionUsers
 */

export type sessionUsers = {
  sessionId: string
  userId: number
}

/**
 * Model user
 */

export type user = {
  userId: number
  name: string | null
}

/**
 * Model userRestaurant
 */

export type userRestaurant = {
  userId: number
  restaurantId: string | null
  vote: Buffer | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.session`: Exposes CRUD operations for the **session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.sessionDelegate<GlobalReject>;

  /**
   * `prisma.sessionRestaurant`: Exposes CRUD operations for the **sessionRestaurant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionRestaurants
    * const sessionRestaurants = await prisma.sessionRestaurant.findMany()
    * ```
    */
  get sessionRestaurant(): Prisma.sessionRestaurantDelegate<GlobalReject>;

  /**
   * `prisma.sessionUsers`: Exposes CRUD operations for the **sessionUsers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionUsers
    * const sessionUsers = await prisma.sessionUsers.findMany()
    * ```
    */
  get sessionUsers(): Prisma.sessionUsersDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.userRestaurant`: Exposes CRUD operations for the **userRestaurant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRestaurants
    * const userRestaurants = await prisma.userRestaurant.findMany()
    * ```
    */
  get userRestaurant(): Prisma.userRestaurantDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.19.0
   * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    session: 'session',
    sessionRestaurant: 'sessionRestaurant',
    sessionUsers: 'sessionUsers',
    user: 'user',
    userRestaurant: 'userRestaurant'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model session
   */


  export type AggregateSession = {
    count: SessionCountAggregateOutputType | null
    min: SessionMinAggregateOutputType | null
    max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    sessionId: string | null
    dateCreated: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    sessionId: string | null
    dateCreated: Date | null
  }

  export type SessionCountAggregateOutputType = {
    sessionId: number | null
    dateCreated: number | null
    _all: number
  }


  export type SessionMinAggregateInputType = {
    sessionId?: true
    dateCreated?: true
  }

  export type SessionMaxAggregateInputType = {
    sessionId?: true
    dateCreated?: true
  }

  export type SessionCountAggregateInputType = {
    sessionId?: true
    dateCreated?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which session to aggregate.
    **/
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
    **/
    orderBy?: Enumerable<sessionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
    [P in keyof T & keyof AggregateSession]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }



  export type sessionSelect = {
    sessionId?: boolean
    dateCreated?: boolean
    sessionRestaurant?: boolean | sessionRestaurantArgs
    sessionUsers?: boolean | sessionUsersFindManyArgs
  }

  export type sessionInclude = {
    sessionRestaurant?: boolean | sessionRestaurantArgs
    sessionUsers?: boolean | sessionUsersFindManyArgs
  }

  export type sessionGetPayload<
    S extends boolean | null | undefined | sessionArgs,
    U = keyof S
      > = S extends true
        ? session
    : S extends undefined
    ? never
    : S extends sessionArgs | sessionFindManyArgs
    ?'include' extends U
    ? session  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sessionRestaurant'
        ? sessionRestaurantGetPayload<S['include'][P]> | null :
        P extends 'sessionUsers'
        ? Array < sessionUsersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof session ?session [P]
  : 
          P extends 'sessionRestaurant'
        ? sessionRestaurantGetPayload<S['select'][P]> | null :
        P extends 'sessionUsers'
        ? Array < sessionUsersGetPayload<S['select'][P]>>  : never
  } 
    : session
  : session


  type sessionCountArgs = Merge<
    Omit<sessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface sessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {sessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'session'> extends True ? CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>> : CheckSelect<T, Prisma__sessionClient<session | null >, Prisma__sessionClient<sessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'session'> extends True ? CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>> : CheckSelect<T, Prisma__sessionClient<session | null >, Prisma__sessionClient<sessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `sessionId`
     * const sessionWithSessionIdOnly = await prisma.session.findMany({ select: { sessionId: true } })
     * 
    **/
    findMany<T extends sessionFindManyArgs>(
      args?: SelectSubset<T, sessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<session>>, PrismaPromise<Array<sessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {sessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends sessionCreateArgs>(
      args: SelectSubset<T, sessionCreateArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Delete a Session.
     * @param {sessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends sessionDeleteArgs>(
      args: SelectSubset<T, sessionDeleteArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {sessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionUpdateArgs>(
      args: SelectSubset<T, sessionUpdateArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {sessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionDeleteManyArgs>(
      args?: SelectSubset<T, sessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionUpdateManyArgs>(
      args: SelectSubset<T, sessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {sessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends sessionUpsertArgs>(
      args: SelectSubset<T, sessionUpsertArgs>
    ): CheckSelect<T, Prisma__sessionClient<session>, Prisma__sessionClient<sessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionCountArgs>(
      args?: Subset<T, sessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessionRestaurant<T extends sessionRestaurantArgs = {}>(args?: Subset<T, sessionRestaurantArgs>): CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant | null >, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T> | null >>;

    sessionUsers<T extends sessionUsersFindManyArgs = {}>(args?: Subset<T, sessionUsersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sessionUsers>>, PrismaPromise<Array<sessionUsersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * session findUnique
   */
  export type sessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * Throw an Error if a session can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which session to fetch.
    **/
    where: sessionWhereUniqueInput
  }


  /**
   * session findFirst
   */
  export type sessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * Throw an Error if a session can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which session to fetch.
    **/
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
    **/
    orderBy?: Enumerable<sessionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
    **/
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * session findMany
   */
  export type sessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * Filter, which sessions to fetch.
    **/
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
    **/
    orderBy?: Enumerable<sessionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
    **/
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * session create
   */
  export type sessionCreateArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * The data needed to create a session.
    **/
    data: XOR<sessionCreateInput, sessionUncheckedCreateInput>
  }


  /**
   * session update
   */
  export type sessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * The data needed to update a session.
    **/
    data: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
    /**
     * Choose, which session to update.
    **/
    where: sessionWhereUniqueInput
  }


  /**
   * session updateMany
   */
  export type sessionUpdateManyArgs = {
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyInput>
    where?: sessionWhereInput
  }


  /**
   * session upsert
   */
  export type sessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * The filter to search for the session to update in case it exists.
    **/
    where: sessionWhereUniqueInput
    /**
     * In case the session found by the `where` argument doesn't exist, create a new session with this data.
    **/
    create: XOR<sessionCreateInput, sessionUncheckedCreateInput>
    /**
     * In case the session was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
  }


  /**
   * session delete
   */
  export type sessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
    /**
     * Filter which session to delete.
    **/
    where: sessionWhereUniqueInput
  }


  /**
   * session deleteMany
   */
  export type sessionDeleteManyArgs = {
    where?: sessionWhereInput
  }


  /**
   * session without action
   */
  export type sessionArgs = {
    /**
     * Select specific fields to fetch from the session
    **/
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionInclude | null
  }



  /**
   * Model sessionRestaurant
   */


  export type AggregateSessionRestaurant = {
    count: SessionRestaurantCountAggregateOutputType | null
    avg: SessionRestaurantAvgAggregateOutputType | null
    sum: SessionRestaurantSumAggregateOutputType | null
    min: SessionRestaurantMinAggregateOutputType | null
    max: SessionRestaurantMaxAggregateOutputType | null
  }

  export type SessionRestaurantAvgAggregateOutputType = {
    votes: number | null
  }

  export type SessionRestaurantSumAggregateOutputType = {
    votes: number | null
  }

  export type SessionRestaurantMinAggregateOutputType = {
    sessionId: string | null
    restaurantId: string | null
    votes: number | null
  }

  export type SessionRestaurantMaxAggregateOutputType = {
    sessionId: string | null
    restaurantId: string | null
    votes: number | null
  }

  export type SessionRestaurantCountAggregateOutputType = {
    sessionId: number | null
    restaurantId: number | null
    votes: number | null
    _all: number
  }


  export type SessionRestaurantAvgAggregateInputType = {
    votes?: true
  }

  export type SessionRestaurantSumAggregateInputType = {
    votes?: true
  }

  export type SessionRestaurantMinAggregateInputType = {
    sessionId?: true
    restaurantId?: true
    votes?: true
  }

  export type SessionRestaurantMaxAggregateInputType = {
    sessionId?: true
    restaurantId?: true
    votes?: true
  }

  export type SessionRestaurantCountAggregateInputType = {
    sessionId?: true
    restaurantId?: true
    votes?: true
    _all?: true
  }

  export type SessionRestaurantAggregateArgs = {
    /**
     * Filter which sessionRestaurant to aggregate.
    **/
    where?: sessionRestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessionRestaurants to fetch.
    **/
    orderBy?: Enumerable<sessionRestaurantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: sessionRestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessionRestaurants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessionRestaurants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessionRestaurants
    **/
    count?: true | SessionRestaurantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SessionRestaurantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SessionRestaurantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SessionRestaurantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SessionRestaurantMaxAggregateInputType
  }

  export type GetSessionRestaurantAggregateType<T extends SessionRestaurantAggregateArgs> = {
    [P in keyof T & keyof AggregateSessionRestaurant]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionRestaurant[P]>
      : GetScalarType<T[P], AggregateSessionRestaurant[P]>
  }



  export type sessionRestaurantSelect = {
    sessionId?: boolean
    restaurantId?: boolean
    votes?: boolean
    session?: boolean | sessionArgs
  }

  export type sessionRestaurantInclude = {
    session?: boolean | sessionArgs
  }

  export type sessionRestaurantGetPayload<
    S extends boolean | null | undefined | sessionRestaurantArgs,
    U = keyof S
      > = S extends true
        ? sessionRestaurant
    : S extends undefined
    ? never
    : S extends sessionRestaurantArgs | sessionRestaurantFindManyArgs
    ?'include' extends U
    ? sessionRestaurant  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'session'
        ? sessionGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof sessionRestaurant ?sessionRestaurant [P]
  : 
          P extends 'session'
        ? sessionGetPayload<S['select'][P]> : never
  } 
    : sessionRestaurant
  : sessionRestaurant


  type sessionRestaurantCountArgs = Merge<
    Omit<sessionRestaurantFindManyArgs, 'select' | 'include'> & {
      select?: SessionRestaurantCountAggregateInputType | true
    }
  >

  export interface sessionRestaurantDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SessionRestaurant that matches the filter.
     * @param {sessionRestaurantFindUniqueArgs} args - Arguments to find a SessionRestaurant
     * @example
     * // Get one SessionRestaurant
     * const sessionRestaurant = await prisma.sessionRestaurant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionRestaurantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionRestaurantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sessionRestaurant'> extends True ? CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant>, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T>>> : CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant | null >, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T> | null >>

    /**
     * Find the first SessionRestaurant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionRestaurantFindFirstArgs} args - Arguments to find a SessionRestaurant
     * @example
     * // Get one SessionRestaurant
     * const sessionRestaurant = await prisma.sessionRestaurant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionRestaurantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionRestaurantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sessionRestaurant'> extends True ? CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant>, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T>>> : CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant | null >, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T> | null >>

    /**
     * Find zero or more SessionRestaurants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionRestaurantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionRestaurants
     * const sessionRestaurants = await prisma.sessionRestaurant.findMany()
     * 
     * // Get first 10 SessionRestaurants
     * const sessionRestaurants = await prisma.sessionRestaurant.findMany({ take: 10 })
     * 
     * // Only select the `sessionId`
     * const sessionRestaurantWithSessionIdOnly = await prisma.sessionRestaurant.findMany({ select: { sessionId: true } })
     * 
    **/
    findMany<T extends sessionRestaurantFindManyArgs>(
      args?: SelectSubset<T, sessionRestaurantFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sessionRestaurant>>, PrismaPromise<Array<sessionRestaurantGetPayload<T>>>>

    /**
     * Create a SessionRestaurant.
     * @param {sessionRestaurantCreateArgs} args - Arguments to create a SessionRestaurant.
     * @example
     * // Create one SessionRestaurant
     * const SessionRestaurant = await prisma.sessionRestaurant.create({
     *   data: {
     *     // ... data to create a SessionRestaurant
     *   }
     * })
     * 
    **/
    create<T extends sessionRestaurantCreateArgs>(
      args: SelectSubset<T, sessionRestaurantCreateArgs>
    ): CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant>, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T>>>

    /**
     * Delete a SessionRestaurant.
     * @param {sessionRestaurantDeleteArgs} args - Arguments to delete one SessionRestaurant.
     * @example
     * // Delete one SessionRestaurant
     * const SessionRestaurant = await prisma.sessionRestaurant.delete({
     *   where: {
     *     // ... filter to delete one SessionRestaurant
     *   }
     * })
     * 
    **/
    delete<T extends sessionRestaurantDeleteArgs>(
      args: SelectSubset<T, sessionRestaurantDeleteArgs>
    ): CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant>, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T>>>

    /**
     * Update one SessionRestaurant.
     * @param {sessionRestaurantUpdateArgs} args - Arguments to update one SessionRestaurant.
     * @example
     * // Update one SessionRestaurant
     * const sessionRestaurant = await prisma.sessionRestaurant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionRestaurantUpdateArgs>(
      args: SelectSubset<T, sessionRestaurantUpdateArgs>
    ): CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant>, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T>>>

    /**
     * Delete zero or more SessionRestaurants.
     * @param {sessionRestaurantDeleteManyArgs} args - Arguments to filter SessionRestaurants to delete.
     * @example
     * // Delete a few SessionRestaurants
     * const { count } = await prisma.sessionRestaurant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionRestaurantDeleteManyArgs>(
      args?: SelectSubset<T, sessionRestaurantDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionRestaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionRestaurantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionRestaurants
     * const sessionRestaurant = await prisma.sessionRestaurant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionRestaurantUpdateManyArgs>(
      args: SelectSubset<T, sessionRestaurantUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionRestaurant.
     * @param {sessionRestaurantUpsertArgs} args - Arguments to update or create a SessionRestaurant.
     * @example
     * // Update or create a SessionRestaurant
     * const sessionRestaurant = await prisma.sessionRestaurant.upsert({
     *   create: {
     *     // ... data to create a SessionRestaurant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionRestaurant we want to update
     *   }
     * })
    **/
    upsert<T extends sessionRestaurantUpsertArgs>(
      args: SelectSubset<T, sessionRestaurantUpsertArgs>
    ): CheckSelect<T, Prisma__sessionRestaurantClient<sessionRestaurant>, Prisma__sessionRestaurantClient<sessionRestaurantGetPayload<T>>>

    /**
     * Count the number of SessionRestaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionRestaurantCountArgs} args - Arguments to filter SessionRestaurants to count.
     * @example
     * // Count the number of SessionRestaurants
     * const count = await prisma.sessionRestaurant.count({
     *   where: {
     *     // ... the filter for the SessionRestaurants we want to count
     *   }
     * })
    **/
    count<T extends sessionRestaurantCountArgs>(
      args?: Subset<T, sessionRestaurantCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionRestaurantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionRestaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionRestaurantAggregateArgs>(args: Subset<T, SessionRestaurantAggregateArgs>): PrismaPromise<GetSessionRestaurantAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for sessionRestaurant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionRestaurantClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    session<T extends sessionArgs = {}>(args?: Subset<T, sessionArgs>): CheckSelect<T, Prisma__sessionClient<session | null >, Prisma__sessionClient<sessionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sessionRestaurant findUnique
   */
  export type sessionRestaurantFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * Throw an Error if a sessionRestaurant can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sessionRestaurant to fetch.
    **/
    where: sessionRestaurantWhereUniqueInput
  }


  /**
   * sessionRestaurant findFirst
   */
  export type sessionRestaurantFindFirstArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * Throw an Error if a sessionRestaurant can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sessionRestaurant to fetch.
    **/
    where?: sessionRestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessionRestaurants to fetch.
    **/
    orderBy?: Enumerable<sessionRestaurantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessionRestaurants.
    **/
    cursor?: sessionRestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessionRestaurants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessionRestaurants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessionRestaurants.
    **/
    distinct?: Enumerable<SessionRestaurantScalarFieldEnum>
  }


  /**
   * sessionRestaurant findMany
   */
  export type sessionRestaurantFindManyArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * Filter, which sessionRestaurants to fetch.
    **/
    where?: sessionRestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessionRestaurants to fetch.
    **/
    orderBy?: Enumerable<sessionRestaurantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessionRestaurants.
    **/
    cursor?: sessionRestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessionRestaurants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessionRestaurants.
    **/
    skip?: number
    distinct?: Enumerable<SessionRestaurantScalarFieldEnum>
  }


  /**
   * sessionRestaurant create
   */
  export type sessionRestaurantCreateArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * The data needed to create a sessionRestaurant.
    **/
    data: XOR<sessionRestaurantCreateInput, sessionRestaurantUncheckedCreateInput>
  }


  /**
   * sessionRestaurant update
   */
  export type sessionRestaurantUpdateArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * The data needed to update a sessionRestaurant.
    **/
    data: XOR<sessionRestaurantUpdateInput, sessionRestaurantUncheckedUpdateInput>
    /**
     * Choose, which sessionRestaurant to update.
    **/
    where: sessionRestaurantWhereUniqueInput
  }


  /**
   * sessionRestaurant updateMany
   */
  export type sessionRestaurantUpdateManyArgs = {
    data: XOR<sessionRestaurantUpdateManyMutationInput, sessionRestaurantUncheckedUpdateManyInput>
    where?: sessionRestaurantWhereInput
  }


  /**
   * sessionRestaurant upsert
   */
  export type sessionRestaurantUpsertArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * The filter to search for the sessionRestaurant to update in case it exists.
    **/
    where: sessionRestaurantWhereUniqueInput
    /**
     * In case the sessionRestaurant found by the `where` argument doesn't exist, create a new sessionRestaurant with this data.
    **/
    create: XOR<sessionRestaurantCreateInput, sessionRestaurantUncheckedCreateInput>
    /**
     * In case the sessionRestaurant was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<sessionRestaurantUpdateInput, sessionRestaurantUncheckedUpdateInput>
  }


  /**
   * sessionRestaurant delete
   */
  export type sessionRestaurantDeleteArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
    /**
     * Filter which sessionRestaurant to delete.
    **/
    where: sessionRestaurantWhereUniqueInput
  }


  /**
   * sessionRestaurant deleteMany
   */
  export type sessionRestaurantDeleteManyArgs = {
    where?: sessionRestaurantWhereInput
  }


  /**
   * sessionRestaurant without action
   */
  export type sessionRestaurantArgs = {
    /**
     * Select specific fields to fetch from the sessionRestaurant
    **/
    select?: sessionRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionRestaurantInclude | null
  }



  /**
   * Model sessionUsers
   */


  export type AggregateSessionUsers = {
    count: SessionUsersCountAggregateOutputType | null
    avg: SessionUsersAvgAggregateOutputType | null
    sum: SessionUsersSumAggregateOutputType | null
    min: SessionUsersMinAggregateOutputType | null
    max: SessionUsersMaxAggregateOutputType | null
  }

  export type SessionUsersAvgAggregateOutputType = {
    userId: number
  }

  export type SessionUsersSumAggregateOutputType = {
    userId: number
  }

  export type SessionUsersMinAggregateOutputType = {
    sessionId: string | null
    userId: number
  }

  export type SessionUsersMaxAggregateOutputType = {
    sessionId: string | null
    userId: number
  }

  export type SessionUsersCountAggregateOutputType = {
    sessionId: number | null
    userId: number
    _all: number
  }


  export type SessionUsersAvgAggregateInputType = {
    userId?: true
  }

  export type SessionUsersSumAggregateInputType = {
    userId?: true
  }

  export type SessionUsersMinAggregateInputType = {
    sessionId?: true
    userId?: true
  }

  export type SessionUsersMaxAggregateInputType = {
    sessionId?: true
    userId?: true
  }

  export type SessionUsersCountAggregateInputType = {
    sessionId?: true
    userId?: true
    _all?: true
  }

  export type SessionUsersAggregateArgs = {
    /**
     * Filter which sessionUsers to aggregate.
    **/
    where?: sessionUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessionUsers to fetch.
    **/
    orderBy?: Enumerable<sessionUsersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: sessionUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessionUsers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessionUsers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessionUsers
    **/
    count?: true | SessionUsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: SessionUsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: SessionUsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SessionUsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SessionUsersMaxAggregateInputType
  }

  export type GetSessionUsersAggregateType<T extends SessionUsersAggregateArgs> = {
    [P in keyof T & keyof AggregateSessionUsers]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionUsers[P]>
      : GetScalarType<T[P], AggregateSessionUsers[P]>
  }



  export type sessionUsersSelect = {
    sessionId?: boolean
    userId?: boolean
    session?: boolean | sessionArgs
    user?: boolean | userArgs
  }

  export type sessionUsersInclude = {
    session?: boolean | sessionArgs
    user?: boolean | userArgs
  }

  export type sessionUsersGetPayload<
    S extends boolean | null | undefined | sessionUsersArgs,
    U = keyof S
      > = S extends true
        ? sessionUsers
    : S extends undefined
    ? never
    : S extends sessionUsersArgs | sessionUsersFindManyArgs
    ?'include' extends U
    ? sessionUsers  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'session'
        ? sessionGetPayload<S['include'][P]> :
        P extends 'user'
        ? userGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof sessionUsers ?sessionUsers [P]
  : 
          P extends 'session'
        ? sessionGetPayload<S['select'][P]> :
        P extends 'user'
        ? userGetPayload<S['select'][P]> : never
  } 
    : sessionUsers
  : sessionUsers


  type sessionUsersCountArgs = Merge<
    Omit<sessionUsersFindManyArgs, 'select' | 'include'> & {
      select?: SessionUsersCountAggregateInputType | true
    }
  >

  export interface sessionUsersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SessionUsers that matches the filter.
     * @param {sessionUsersFindUniqueArgs} args - Arguments to find a SessionUsers
     * @example
     * // Get one SessionUsers
     * const sessionUsers = await prisma.sessionUsers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionUsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionUsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sessionUsers'> extends True ? CheckSelect<T, Prisma__sessionUsersClient<sessionUsers>, Prisma__sessionUsersClient<sessionUsersGetPayload<T>>> : CheckSelect<T, Prisma__sessionUsersClient<sessionUsers | null >, Prisma__sessionUsersClient<sessionUsersGetPayload<T> | null >>

    /**
     * Find the first SessionUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUsersFindFirstArgs} args - Arguments to find a SessionUsers
     * @example
     * // Get one SessionUsers
     * const sessionUsers = await prisma.sessionUsers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionUsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionUsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sessionUsers'> extends True ? CheckSelect<T, Prisma__sessionUsersClient<sessionUsers>, Prisma__sessionUsersClient<sessionUsersGetPayload<T>>> : CheckSelect<T, Prisma__sessionUsersClient<sessionUsers | null >, Prisma__sessionUsersClient<sessionUsersGetPayload<T> | null >>

    /**
     * Find zero or more SessionUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionUsers
     * const sessionUsers = await prisma.sessionUsers.findMany()
     * 
     * // Get first 10 SessionUsers
     * const sessionUsers = await prisma.sessionUsers.findMany({ take: 10 })
     * 
     * // Only select the `sessionId`
     * const sessionUsersWithSessionIdOnly = await prisma.sessionUsers.findMany({ select: { sessionId: true } })
     * 
    **/
    findMany<T extends sessionUsersFindManyArgs>(
      args?: SelectSubset<T, sessionUsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sessionUsers>>, PrismaPromise<Array<sessionUsersGetPayload<T>>>>

    /**
     * Create a SessionUsers.
     * @param {sessionUsersCreateArgs} args - Arguments to create a SessionUsers.
     * @example
     * // Create one SessionUsers
     * const SessionUsers = await prisma.sessionUsers.create({
     *   data: {
     *     // ... data to create a SessionUsers
     *   }
     * })
     * 
    **/
    create<T extends sessionUsersCreateArgs>(
      args: SelectSubset<T, sessionUsersCreateArgs>
    ): CheckSelect<T, Prisma__sessionUsersClient<sessionUsers>, Prisma__sessionUsersClient<sessionUsersGetPayload<T>>>

    /**
     * Delete a SessionUsers.
     * @param {sessionUsersDeleteArgs} args - Arguments to delete one SessionUsers.
     * @example
     * // Delete one SessionUsers
     * const SessionUsers = await prisma.sessionUsers.delete({
     *   where: {
     *     // ... filter to delete one SessionUsers
     *   }
     * })
     * 
    **/
    delete<T extends sessionUsersDeleteArgs>(
      args: SelectSubset<T, sessionUsersDeleteArgs>
    ): CheckSelect<T, Prisma__sessionUsersClient<sessionUsers>, Prisma__sessionUsersClient<sessionUsersGetPayload<T>>>

    /**
     * Update one SessionUsers.
     * @param {sessionUsersUpdateArgs} args - Arguments to update one SessionUsers.
     * @example
     * // Update one SessionUsers
     * const sessionUsers = await prisma.sessionUsers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionUsersUpdateArgs>(
      args: SelectSubset<T, sessionUsersUpdateArgs>
    ): CheckSelect<T, Prisma__sessionUsersClient<sessionUsers>, Prisma__sessionUsersClient<sessionUsersGetPayload<T>>>

    /**
     * Delete zero or more SessionUsers.
     * @param {sessionUsersDeleteManyArgs} args - Arguments to filter SessionUsers to delete.
     * @example
     * // Delete a few SessionUsers
     * const { count } = await prisma.sessionUsers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionUsersDeleteManyArgs>(
      args?: SelectSubset<T, sessionUsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionUsers
     * const sessionUsers = await prisma.sessionUsers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionUsersUpdateManyArgs>(
      args: SelectSubset<T, sessionUsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionUsers.
     * @param {sessionUsersUpsertArgs} args - Arguments to update or create a SessionUsers.
     * @example
     * // Update or create a SessionUsers
     * const sessionUsers = await prisma.sessionUsers.upsert({
     *   create: {
     *     // ... data to create a SessionUsers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionUsers we want to update
     *   }
     * })
    **/
    upsert<T extends sessionUsersUpsertArgs>(
      args: SelectSubset<T, sessionUsersUpsertArgs>
    ): CheckSelect<T, Prisma__sessionUsersClient<sessionUsers>, Prisma__sessionUsersClient<sessionUsersGetPayload<T>>>

    /**
     * Count the number of SessionUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUsersCountArgs} args - Arguments to filter SessionUsers to count.
     * @example
     * // Count the number of SessionUsers
     * const count = await prisma.sessionUsers.count({
     *   where: {
     *     // ... the filter for the SessionUsers we want to count
     *   }
     * })
    **/
    count<T extends sessionUsersCountArgs>(
      args?: Subset<T, sessionUsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionUsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionUsersAggregateArgs>(args: Subset<T, SessionUsersAggregateArgs>): PrismaPromise<GetSessionUsersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for sessionUsers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionUsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    session<T extends sessionArgs = {}>(args?: Subset<T, sessionArgs>): CheckSelect<T, Prisma__sessionClient<session | null >, Prisma__sessionClient<sessionGetPayload<T> | null >>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sessionUsers findUnique
   */
  export type sessionUsersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * Throw an Error if a sessionUsers can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sessionUsers to fetch.
    **/
    where: sessionUsersWhereUniqueInput
  }


  /**
   * sessionUsers findFirst
   */
  export type sessionUsersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * Throw an Error if a sessionUsers can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sessionUsers to fetch.
    **/
    where?: sessionUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessionUsers to fetch.
    **/
    orderBy?: Enumerable<sessionUsersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessionUsers.
    **/
    cursor?: sessionUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessionUsers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessionUsers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessionUsers.
    **/
    distinct?: Enumerable<SessionUsersScalarFieldEnum>
  }


  /**
   * sessionUsers findMany
   */
  export type sessionUsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * Filter, which sessionUsers to fetch.
    **/
    where?: sessionUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessionUsers to fetch.
    **/
    orderBy?: Enumerable<sessionUsersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessionUsers.
    **/
    cursor?: sessionUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessionUsers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessionUsers.
    **/
    skip?: number
    distinct?: Enumerable<SessionUsersScalarFieldEnum>
  }


  /**
   * sessionUsers create
   */
  export type sessionUsersCreateArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * The data needed to create a sessionUsers.
    **/
    data: XOR<sessionUsersCreateInput, sessionUsersUncheckedCreateInput>
  }


  /**
   * sessionUsers update
   */
  export type sessionUsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * The data needed to update a sessionUsers.
    **/
    data: XOR<sessionUsersUpdateInput, sessionUsersUncheckedUpdateInput>
    /**
     * Choose, which sessionUsers to update.
    **/
    where: sessionUsersWhereUniqueInput
  }


  /**
   * sessionUsers updateMany
   */
  export type sessionUsersUpdateManyArgs = {
    data: XOR<sessionUsersUpdateManyMutationInput, sessionUsersUncheckedUpdateManyInput>
    where?: sessionUsersWhereInput
  }


  /**
   * sessionUsers upsert
   */
  export type sessionUsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * The filter to search for the sessionUsers to update in case it exists.
    **/
    where: sessionUsersWhereUniqueInput
    /**
     * In case the sessionUsers found by the `where` argument doesn't exist, create a new sessionUsers with this data.
    **/
    create: XOR<sessionUsersCreateInput, sessionUsersUncheckedCreateInput>
    /**
     * In case the sessionUsers was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<sessionUsersUpdateInput, sessionUsersUncheckedUpdateInput>
  }


  /**
   * sessionUsers delete
   */
  export type sessionUsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
    /**
     * Filter which sessionUsers to delete.
    **/
    where: sessionUsersWhereUniqueInput
  }


  /**
   * sessionUsers deleteMany
   */
  export type sessionUsersDeleteManyArgs = {
    where?: sessionUsersWhereInput
  }


  /**
   * sessionUsers without action
   */
  export type sessionUsersArgs = {
    /**
     * Select specific fields to fetch from the sessionUsers
    **/
    select?: sessionUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: sessionUsersInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number
  }

  export type UserSumAggregateOutputType = {
    userId: number
  }

  export type UserMinAggregateOutputType = {
    userId: number
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    name: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type userSelect = {
    userId?: boolean
    name?: boolean
    sessionUsers?: boolean | sessionUsersFindManyArgs
    userRestaurant?: boolean | userRestaurantArgs
  }

  export type userInclude = {
    sessionUsers?: boolean | sessionUsersFindManyArgs
    userRestaurant?: boolean | userRestaurantArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sessionUsers'
        ? Array < sessionUsersGetPayload<S['include'][P]>>  :
        P extends 'userRestaurant'
        ? userRestaurantGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user ?user [P]
  : 
          P extends 'sessionUsers'
        ? Array < sessionUsersGetPayload<S['select'][P]>>  :
        P extends 'userRestaurant'
        ? userRestaurantGetPayload<S['select'][P]> | null : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessionUsers<T extends sessionUsersFindManyArgs = {}>(args?: Subset<T, sessionUsersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sessionUsers>>, PrismaPromise<Array<sessionUsersGetPayload<T>>>>;

    userRestaurant<T extends userRestaurantArgs = {}>(args?: Subset<T, userRestaurantArgs>): CheckSelect<T, Prisma__userRestaurantClient<userRestaurant | null >, Prisma__userRestaurantClient<userRestaurantGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
  }



  /**
   * Model userRestaurant
   */


  export type AggregateUserRestaurant = {
    count: UserRestaurantCountAggregateOutputType | null
    avg: UserRestaurantAvgAggregateOutputType | null
    sum: UserRestaurantSumAggregateOutputType | null
    min: UserRestaurantMinAggregateOutputType | null
    max: UserRestaurantMaxAggregateOutputType | null
  }

  export type UserRestaurantAvgAggregateOutputType = {
    userId: number
  }

  export type UserRestaurantSumAggregateOutputType = {
    userId: number
  }

  export type UserRestaurantMinAggregateOutputType = {
    userId: number
    restaurantId: string | null
    vote: Buffer | null
  }

  export type UserRestaurantMaxAggregateOutputType = {
    userId: number
    restaurantId: string | null
    vote: Buffer | null
  }

  export type UserRestaurantCountAggregateOutputType = {
    userId: number
    restaurantId: number | null
    vote: number | null
    _all: number
  }


  export type UserRestaurantAvgAggregateInputType = {
    userId?: true
  }

  export type UserRestaurantSumAggregateInputType = {
    userId?: true
  }

  export type UserRestaurantMinAggregateInputType = {
    userId?: true
    restaurantId?: true
    vote?: true
  }

  export type UserRestaurantMaxAggregateInputType = {
    userId?: true
    restaurantId?: true
    vote?: true
  }

  export type UserRestaurantCountAggregateInputType = {
    userId?: true
    restaurantId?: true
    vote?: true
    _all?: true
  }

  export type UserRestaurantAggregateArgs = {
    /**
     * Filter which userRestaurant to aggregate.
    **/
    where?: userRestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRestaurants to fetch.
    **/
    orderBy?: Enumerable<userRestaurantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userRestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRestaurants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRestaurants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userRestaurants
    **/
    count?: true | UserRestaurantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserRestaurantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserRestaurantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserRestaurantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserRestaurantMaxAggregateInputType
  }

  export type GetUserRestaurantAggregateType<T extends UserRestaurantAggregateArgs> = {
    [P in keyof T & keyof AggregateUserRestaurant]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRestaurant[P]>
      : GetScalarType<T[P], AggregateUserRestaurant[P]>
  }



  export type userRestaurantSelect = {
    userId?: boolean
    restaurantId?: boolean
    vote?: boolean
    user?: boolean | userArgs
  }

  export type userRestaurantInclude = {
    user?: boolean | userArgs
  }

  export type userRestaurantGetPayload<
    S extends boolean | null | undefined | userRestaurantArgs,
    U = keyof S
      > = S extends true
        ? userRestaurant
    : S extends undefined
    ? never
    : S extends userRestaurantArgs | userRestaurantFindManyArgs
    ?'include' extends U
    ? userRestaurant  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? userGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof userRestaurant ?userRestaurant [P]
  : 
          P extends 'user'
        ? userGetPayload<S['select'][P]> : never
  } 
    : userRestaurant
  : userRestaurant


  type userRestaurantCountArgs = Merge<
    Omit<userRestaurantFindManyArgs, 'select' | 'include'> & {
      select?: UserRestaurantCountAggregateInputType | true
    }
  >

  export interface userRestaurantDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserRestaurant that matches the filter.
     * @param {userRestaurantFindUniqueArgs} args - Arguments to find a UserRestaurant
     * @example
     * // Get one UserRestaurant
     * const userRestaurant = await prisma.userRestaurant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userRestaurantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userRestaurantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userRestaurant'> extends True ? CheckSelect<T, Prisma__userRestaurantClient<userRestaurant>, Prisma__userRestaurantClient<userRestaurantGetPayload<T>>> : CheckSelect<T, Prisma__userRestaurantClient<userRestaurant | null >, Prisma__userRestaurantClient<userRestaurantGetPayload<T> | null >>

    /**
     * Find the first UserRestaurant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRestaurantFindFirstArgs} args - Arguments to find a UserRestaurant
     * @example
     * // Get one UserRestaurant
     * const userRestaurant = await prisma.userRestaurant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userRestaurantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userRestaurantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userRestaurant'> extends True ? CheckSelect<T, Prisma__userRestaurantClient<userRestaurant>, Prisma__userRestaurantClient<userRestaurantGetPayload<T>>> : CheckSelect<T, Prisma__userRestaurantClient<userRestaurant | null >, Prisma__userRestaurantClient<userRestaurantGetPayload<T> | null >>

    /**
     * Find zero or more UserRestaurants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRestaurantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRestaurants
     * const userRestaurants = await prisma.userRestaurant.findMany()
     * 
     * // Get first 10 UserRestaurants
     * const userRestaurants = await prisma.userRestaurant.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userRestaurantWithUserIdOnly = await prisma.userRestaurant.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends userRestaurantFindManyArgs>(
      args?: SelectSubset<T, userRestaurantFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<userRestaurant>>, PrismaPromise<Array<userRestaurantGetPayload<T>>>>

    /**
     * Create a UserRestaurant.
     * @param {userRestaurantCreateArgs} args - Arguments to create a UserRestaurant.
     * @example
     * // Create one UserRestaurant
     * const UserRestaurant = await prisma.userRestaurant.create({
     *   data: {
     *     // ... data to create a UserRestaurant
     *   }
     * })
     * 
    **/
    create<T extends userRestaurantCreateArgs>(
      args: SelectSubset<T, userRestaurantCreateArgs>
    ): CheckSelect<T, Prisma__userRestaurantClient<userRestaurant>, Prisma__userRestaurantClient<userRestaurantGetPayload<T>>>

    /**
     * Delete a UserRestaurant.
     * @param {userRestaurantDeleteArgs} args - Arguments to delete one UserRestaurant.
     * @example
     * // Delete one UserRestaurant
     * const UserRestaurant = await prisma.userRestaurant.delete({
     *   where: {
     *     // ... filter to delete one UserRestaurant
     *   }
     * })
     * 
    **/
    delete<T extends userRestaurantDeleteArgs>(
      args: SelectSubset<T, userRestaurantDeleteArgs>
    ): CheckSelect<T, Prisma__userRestaurantClient<userRestaurant>, Prisma__userRestaurantClient<userRestaurantGetPayload<T>>>

    /**
     * Update one UserRestaurant.
     * @param {userRestaurantUpdateArgs} args - Arguments to update one UserRestaurant.
     * @example
     * // Update one UserRestaurant
     * const userRestaurant = await prisma.userRestaurant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userRestaurantUpdateArgs>(
      args: SelectSubset<T, userRestaurantUpdateArgs>
    ): CheckSelect<T, Prisma__userRestaurantClient<userRestaurant>, Prisma__userRestaurantClient<userRestaurantGetPayload<T>>>

    /**
     * Delete zero or more UserRestaurants.
     * @param {userRestaurantDeleteManyArgs} args - Arguments to filter UserRestaurants to delete.
     * @example
     * // Delete a few UserRestaurants
     * const { count } = await prisma.userRestaurant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userRestaurantDeleteManyArgs>(
      args?: SelectSubset<T, userRestaurantDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRestaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRestaurantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRestaurants
     * const userRestaurant = await prisma.userRestaurant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userRestaurantUpdateManyArgs>(
      args: SelectSubset<T, userRestaurantUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRestaurant.
     * @param {userRestaurantUpsertArgs} args - Arguments to update or create a UserRestaurant.
     * @example
     * // Update or create a UserRestaurant
     * const userRestaurant = await prisma.userRestaurant.upsert({
     *   create: {
     *     // ... data to create a UserRestaurant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRestaurant we want to update
     *   }
     * })
    **/
    upsert<T extends userRestaurantUpsertArgs>(
      args: SelectSubset<T, userRestaurantUpsertArgs>
    ): CheckSelect<T, Prisma__userRestaurantClient<userRestaurant>, Prisma__userRestaurantClient<userRestaurantGetPayload<T>>>

    /**
     * Count the number of UserRestaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRestaurantCountArgs} args - Arguments to filter UserRestaurants to count.
     * @example
     * // Count the number of UserRestaurants
     * const count = await prisma.userRestaurant.count({
     *   where: {
     *     // ... the filter for the UserRestaurants we want to count
     *   }
     * })
    **/
    count<T extends userRestaurantCountArgs>(
      args?: Subset<T, userRestaurantCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRestaurantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRestaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRestaurantAggregateArgs>(args: Subset<T, UserRestaurantAggregateArgs>): PrismaPromise<GetUserRestaurantAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for userRestaurant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userRestaurantClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * userRestaurant findUnique
   */
  export type userRestaurantFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * Throw an Error if a userRestaurant can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userRestaurant to fetch.
    **/
    where: userRestaurantWhereUniqueInput
  }


  /**
   * userRestaurant findFirst
   */
  export type userRestaurantFindFirstArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * Throw an Error if a userRestaurant can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userRestaurant to fetch.
    **/
    where?: userRestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRestaurants to fetch.
    **/
    orderBy?: Enumerable<userRestaurantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userRestaurants.
    **/
    cursor?: userRestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRestaurants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRestaurants.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userRestaurants.
    **/
    distinct?: Enumerable<UserRestaurantScalarFieldEnum>
  }


  /**
   * userRestaurant findMany
   */
  export type userRestaurantFindManyArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * Filter, which userRestaurants to fetch.
    **/
    where?: userRestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRestaurants to fetch.
    **/
    orderBy?: Enumerable<userRestaurantOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userRestaurants.
    **/
    cursor?: userRestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRestaurants from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRestaurants.
    **/
    skip?: number
    distinct?: Enumerable<UserRestaurantScalarFieldEnum>
  }


  /**
   * userRestaurant create
   */
  export type userRestaurantCreateArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * The data needed to create a userRestaurant.
    **/
    data: XOR<userRestaurantCreateInput, userRestaurantUncheckedCreateInput>
  }


  /**
   * userRestaurant update
   */
  export type userRestaurantUpdateArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * The data needed to update a userRestaurant.
    **/
    data: XOR<userRestaurantUpdateInput, userRestaurantUncheckedUpdateInput>
    /**
     * Choose, which userRestaurant to update.
    **/
    where: userRestaurantWhereUniqueInput
  }


  /**
   * userRestaurant updateMany
   */
  export type userRestaurantUpdateManyArgs = {
    data: XOR<userRestaurantUpdateManyMutationInput, userRestaurantUncheckedUpdateManyInput>
    where?: userRestaurantWhereInput
  }


  /**
   * userRestaurant upsert
   */
  export type userRestaurantUpsertArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * The filter to search for the userRestaurant to update in case it exists.
    **/
    where: userRestaurantWhereUniqueInput
    /**
     * In case the userRestaurant found by the `where` argument doesn't exist, create a new userRestaurant with this data.
    **/
    create: XOR<userRestaurantCreateInput, userRestaurantUncheckedCreateInput>
    /**
     * In case the userRestaurant was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userRestaurantUpdateInput, userRestaurantUncheckedUpdateInput>
  }


  /**
   * userRestaurant delete
   */
  export type userRestaurantDeleteArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
    /**
     * Filter which userRestaurant to delete.
    **/
    where: userRestaurantWhereUniqueInput
  }


  /**
   * userRestaurant deleteMany
   */
  export type userRestaurantDeleteManyArgs = {
    where?: userRestaurantWhereInput
  }


  /**
   * userRestaurant without action
   */
  export type userRestaurantArgs = {
    /**
     * Select specific fields to fetch from the userRestaurant
    **/
    select?: userRestaurantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userRestaurantInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const SessionScalarFieldEnum: {
    sessionId: 'sessionId',
    dateCreated: 'dateCreated'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SessionRestaurantScalarFieldEnum: {
    sessionId: 'sessionId',
    restaurantId: 'restaurantId',
    votes: 'votes'
  };

  export type SessionRestaurantScalarFieldEnum = (typeof SessionRestaurantScalarFieldEnum)[keyof typeof SessionRestaurantScalarFieldEnum]


  export const SessionUsersScalarFieldEnum: {
    sessionId: 'sessionId',
    userId: 'userId'
  };

  export type SessionUsersScalarFieldEnum = (typeof SessionUsersScalarFieldEnum)[keyof typeof SessionUsersScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserRestaurantScalarFieldEnum: {
    userId: 'userId',
    restaurantId: 'restaurantId',
    vote: 'vote'
  };

  export type UserRestaurantScalarFieldEnum = (typeof UserRestaurantScalarFieldEnum)[keyof typeof UserRestaurantScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type sessionWhereInput = {
    AND?: Enumerable<sessionWhereInput>
    OR?: Enumerable<sessionWhereInput>
    NOT?: Enumerable<sessionWhereInput>
    sessionId?: StringFilter | string
    dateCreated?: DateTimeNullableFilter | Date | string | null
    sessionRestaurant?: XOR<SessionRestaurantRelationFilter, sessionRestaurantWhereInput> | null
    sessionUsers?: SessionUsersListRelationFilter
  }

  export type sessionOrderByInput = {
    sessionId?: SortOrder
    dateCreated?: SortOrder
  }

  export type sessionWhereUniqueInput = {
    sessionId?: string
  }

  export type sessionRestaurantWhereInput = {
    AND?: Enumerable<sessionRestaurantWhereInput>
    OR?: Enumerable<sessionRestaurantWhereInput>
    NOT?: Enumerable<sessionRestaurantWhereInput>
    sessionId?: StringFilter | string
    restaurantId?: StringNullableFilter | string | null
    votes?: IntNullableFilter | number | null
    session?: XOR<SessionRelationFilter, sessionWhereInput>
  }

  export type sessionRestaurantOrderByInput = {
    sessionId?: SortOrder
    restaurantId?: SortOrder
    votes?: SortOrder
  }

  export type sessionRestaurantWhereUniqueInput = {
    sessionId?: string
  }

  export type sessionUsersWhereInput = {
    AND?: Enumerable<sessionUsersWhereInput>
    OR?: Enumerable<sessionUsersWhereInput>
    NOT?: Enumerable<sessionUsersWhereInput>
    sessionId?: StringFilter | string
    userId?: IntFilter | number
    session?: XOR<SessionRelationFilter, sessionWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type sessionUsersOrderByInput = {
    sessionId?: SortOrder
    userId?: SortOrder
  }

  export type sessionUsersWhereUniqueInput = {
    sessionId_userId?: sessionUsersSessionIdUserIdCompoundUniqueInput
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    userId?: IntFilter | number
    name?: StringNullableFilter | string | null
    sessionUsers?: SessionUsersListRelationFilter
    userRestaurant?: XOR<UserRestaurantRelationFilter, userRestaurantWhereInput> | null
  }

  export type userOrderByInput = {
    userId?: SortOrder
    name?: SortOrder
  }

  export type userWhereUniqueInput = {
    userId?: number
  }

  export type userRestaurantWhereInput = {
    AND?: Enumerable<userRestaurantWhereInput>
    OR?: Enumerable<userRestaurantWhereInput>
    NOT?: Enumerable<userRestaurantWhereInput>
    userId?: IntFilter | number
    restaurantId?: StringNullableFilter | string | null
    vote?: BytesNullableFilter | Buffer | null
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type userRestaurantOrderByInput = {
    userId?: SortOrder
    restaurantId?: SortOrder
    vote?: SortOrder
  }

  export type userRestaurantWhereUniqueInput = {
    userId?: number
  }

  export type sessionCreateInput = {
    sessionId: string
    dateCreated?: Date | string | null
    sessionRestaurant?: sessionRestaurantCreateNestedOneWithoutSessionInput
    sessionUsers?: sessionUsersCreateNestedManyWithoutSessionInput
  }

  export type sessionUncheckedCreateInput = {
    sessionId: string
    dateCreated?: Date | string | null
    sessionRestaurant?: sessionRestaurantUncheckedCreateNestedOneWithoutSessionInput
    sessionUsers?: sessionUsersUncheckedCreateNestedManyWithoutSessionInput
  }

  export type sessionUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionRestaurant?: sessionRestaurantUpdateOneWithoutSessionInput
    sessionUsers?: sessionUsersUpdateManyWithoutSessionInput
  }

  export type sessionUncheckedUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionRestaurant?: sessionRestaurantUncheckedUpdateOneWithoutSessionInput
    sessionUsers?: sessionUsersUncheckedUpdateManyWithoutSessionInput
  }

  export type sessionUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionUncheckedUpdateManyInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionRestaurantCreateInput = {
    restaurantId?: string | null
    votes?: number | null
    session: sessionCreateNestedOneWithoutSessionRestaurantInput
  }

  export type sessionRestaurantUncheckedCreateInput = {
    sessionId: string
    restaurantId?: string | null
    votes?: number | null
  }

  export type sessionRestaurantUpdateInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: NullableIntFieldUpdateOperationsInput | number | null
    session?: sessionUpdateOneRequiredWithoutSessionRestaurantInput
  }

  export type sessionRestaurantUncheckedUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionRestaurantUpdateManyMutationInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionRestaurantUncheckedUpdateManyInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionUsersCreateInput = {
    session: sessionCreateNestedOneWithoutSessionUsersInput
    user: userCreateNestedOneWithoutSessionUsersInput
  }

  export type sessionUsersUncheckedCreateInput = {
    sessionId: string
    userId: number
  }

  export type sessionUsersUpdateInput = {
    session?: sessionUpdateOneRequiredWithoutSessionUsersInput
    user?: userUpdateOneRequiredWithoutSessionUsersInput
  }

  export type sessionUsersUncheckedUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type sessionUsersUpdateManyMutationInput = {

  }

  export type sessionUsersUncheckedUpdateManyInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateInput = {
    userId: number
    name?: string | null
    sessionUsers?: sessionUsersCreateNestedManyWithoutUserInput
    userRestaurant?: userRestaurantCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    userId: number
    name?: string | null
    sessionUsers?: sessionUsersUncheckedCreateNestedManyWithoutUserInput
    userRestaurant?: userRestaurantUncheckedCreateNestedOneWithoutUserInput
  }

  export type userUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    sessionUsers?: sessionUsersUpdateManyWithoutUserInput
    userRestaurant?: userRestaurantUpdateOneWithoutUserInput
  }

  export type userUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    sessionUsers?: sessionUsersUncheckedUpdateManyWithoutUserInput
    userRestaurant?: userRestaurantUncheckedUpdateOneWithoutUserInput
  }

  export type userUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userRestaurantCreateInput = {
    restaurantId?: string | null
    vote?: Buffer | null
    user: userCreateNestedOneWithoutUserRestaurantInput
  }

  export type userRestaurantUncheckedCreateInput = {
    userId: number
    restaurantId?: string | null
    vote?: Buffer | null
  }

  export type userRestaurantUpdateInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    user?: userUpdateOneRequiredWithoutUserRestaurantInput
  }

  export type userRestaurantUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type userRestaurantUpdateManyMutationInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type userRestaurantUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type SessionRestaurantRelationFilter = {
    is?: sessionRestaurantWhereInput | null
    isNot?: sessionRestaurantWhereInput | null
  }

  export type SessionUsersListRelationFilter = {
    every?: sessionUsersWhereInput
    some?: sessionUsersWhereInput
    none?: sessionUsersWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type SessionRelationFilter = {
    is?: sessionWhereInput
    isNot?: sessionWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type sessionUsersSessionIdUserIdCompoundUniqueInput = {
    sessionId: string
    userId: number
  }

  export type UserRestaurantRelationFilter = {
    is?: userRestaurantWhereInput | null
    isNot?: userRestaurantWhereInput | null
  }

  export type BytesNullableFilter = {
    equals?: Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type sessionRestaurantCreateNestedOneWithoutSessionInput = {
    create?: XOR<sessionRestaurantCreateWithoutSessionInput, sessionRestaurantUncheckedCreateWithoutSessionInput>
    connectOrCreate?: sessionRestaurantCreateOrConnectWithoutSessionInput
    connect?: sessionRestaurantWhereUniqueInput
  }

  export type sessionUsersCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutSessionInput>, Enumerable<sessionUsersUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutSessionInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
  }

  export type sessionRestaurantUncheckedCreateNestedOneWithoutSessionInput = {
    create?: XOR<sessionRestaurantCreateWithoutSessionInput, sessionRestaurantUncheckedCreateWithoutSessionInput>
    connectOrCreate?: sessionRestaurantCreateOrConnectWithoutSessionInput
    connect?: sessionRestaurantWhereUniqueInput
  }

  export type sessionUsersUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutSessionInput>, Enumerable<sessionUsersUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutSessionInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type sessionRestaurantUpdateOneWithoutSessionInput = {
    create?: XOR<sessionRestaurantCreateWithoutSessionInput, sessionRestaurantUncheckedCreateWithoutSessionInput>
    connectOrCreate?: sessionRestaurantCreateOrConnectWithoutSessionInput
    upsert?: sessionRestaurantUpsertWithoutSessionInput
    connect?: sessionRestaurantWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<sessionRestaurantUpdateWithoutSessionInput, sessionRestaurantUncheckedUpdateWithoutSessionInput>
  }

  export type sessionUsersUpdateManyWithoutSessionInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutSessionInput>, Enumerable<sessionUsersUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<sessionUsersUpsertWithWhereUniqueWithoutSessionInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
    set?: Enumerable<sessionUsersWhereUniqueInput>
    disconnect?: Enumerable<sessionUsersWhereUniqueInput>
    delete?: Enumerable<sessionUsersWhereUniqueInput>
    update?: Enumerable<sessionUsersUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<sessionUsersUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<sessionUsersScalarWhereInput>
  }

  export type sessionRestaurantUncheckedUpdateOneWithoutSessionInput = {
    create?: XOR<sessionRestaurantCreateWithoutSessionInput, sessionRestaurantUncheckedCreateWithoutSessionInput>
    connectOrCreate?: sessionRestaurantCreateOrConnectWithoutSessionInput
    upsert?: sessionRestaurantUpsertWithoutSessionInput
    connect?: sessionRestaurantWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<sessionRestaurantUpdateWithoutSessionInput, sessionRestaurantUncheckedUpdateWithoutSessionInput>
  }

  export type sessionUsersUncheckedUpdateManyWithoutSessionInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutSessionInput>, Enumerable<sessionUsersUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<sessionUsersUpsertWithWhereUniqueWithoutSessionInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
    set?: Enumerable<sessionUsersWhereUniqueInput>
    disconnect?: Enumerable<sessionUsersWhereUniqueInput>
    delete?: Enumerable<sessionUsersWhereUniqueInput>
    update?: Enumerable<sessionUsersUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<sessionUsersUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<sessionUsersScalarWhereInput>
  }

  export type sessionCreateNestedOneWithoutSessionRestaurantInput = {
    create?: XOR<sessionCreateWithoutSessionRestaurantInput, sessionUncheckedCreateWithoutSessionRestaurantInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSessionRestaurantInput
    connect?: sessionWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type sessionUpdateOneRequiredWithoutSessionRestaurantInput = {
    create?: XOR<sessionCreateWithoutSessionRestaurantInput, sessionUncheckedCreateWithoutSessionRestaurantInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSessionRestaurantInput
    upsert?: sessionUpsertWithoutSessionRestaurantInput
    connect?: sessionWhereUniqueInput
    update?: XOR<sessionUpdateWithoutSessionRestaurantInput, sessionUncheckedUpdateWithoutSessionRestaurantInput>
  }

  export type sessionCreateNestedOneWithoutSessionUsersInput = {
    create?: XOR<sessionCreateWithoutSessionUsersInput, sessionUncheckedCreateWithoutSessionUsersInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSessionUsersInput
    connect?: sessionWhereUniqueInput
  }

  export type userCreateNestedOneWithoutSessionUsersInput = {
    create?: XOR<userCreateWithoutSessionUsersInput, userUncheckedCreateWithoutSessionUsersInput>
    connectOrCreate?: userCreateOrConnectWithoutSessionUsersInput
    connect?: userWhereUniqueInput
  }

  export type sessionUpdateOneRequiredWithoutSessionUsersInput = {
    create?: XOR<sessionCreateWithoutSessionUsersInput, sessionUncheckedCreateWithoutSessionUsersInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSessionUsersInput
    upsert?: sessionUpsertWithoutSessionUsersInput
    connect?: sessionWhereUniqueInput
    update?: XOR<sessionUpdateWithoutSessionUsersInput, sessionUncheckedUpdateWithoutSessionUsersInput>
  }

  export type userUpdateOneRequiredWithoutSessionUsersInput = {
    create?: XOR<userCreateWithoutSessionUsersInput, userUncheckedCreateWithoutSessionUsersInput>
    connectOrCreate?: userCreateOrConnectWithoutSessionUsersInput
    upsert?: userUpsertWithoutSessionUsersInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutSessionUsersInput, userUncheckedUpdateWithoutSessionUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type sessionUsersCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutUserInput>, Enumerable<sessionUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutUserInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
  }

  export type userRestaurantCreateNestedOneWithoutUserInput = {
    create?: XOR<userRestaurantCreateWithoutUserInput, userRestaurantUncheckedCreateWithoutUserInput>
    connectOrCreate?: userRestaurantCreateOrConnectWithoutUserInput
    connect?: userRestaurantWhereUniqueInput
  }

  export type sessionUsersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutUserInput>, Enumerable<sessionUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutUserInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
  }

  export type userRestaurantUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<userRestaurantCreateWithoutUserInput, userRestaurantUncheckedCreateWithoutUserInput>
    connectOrCreate?: userRestaurantCreateOrConnectWithoutUserInput
    connect?: userRestaurantWhereUniqueInput
  }

  export type sessionUsersUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutUserInput>, Enumerable<sessionUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<sessionUsersUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
    set?: Enumerable<sessionUsersWhereUniqueInput>
    disconnect?: Enumerable<sessionUsersWhereUniqueInput>
    delete?: Enumerable<sessionUsersWhereUniqueInput>
    update?: Enumerable<sessionUsersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<sessionUsersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<sessionUsersScalarWhereInput>
  }

  export type userRestaurantUpdateOneWithoutUserInput = {
    create?: XOR<userRestaurantCreateWithoutUserInput, userRestaurantUncheckedCreateWithoutUserInput>
    connectOrCreate?: userRestaurantCreateOrConnectWithoutUserInput
    upsert?: userRestaurantUpsertWithoutUserInput
    connect?: userRestaurantWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<userRestaurantUpdateWithoutUserInput, userRestaurantUncheckedUpdateWithoutUserInput>
  }

  export type sessionUsersUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionUsersCreateWithoutUserInput>, Enumerable<sessionUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionUsersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<sessionUsersUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<sessionUsersWhereUniqueInput>
    set?: Enumerable<sessionUsersWhereUniqueInput>
    disconnect?: Enumerable<sessionUsersWhereUniqueInput>
    delete?: Enumerable<sessionUsersWhereUniqueInput>
    update?: Enumerable<sessionUsersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<sessionUsersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<sessionUsersScalarWhereInput>
  }

  export type userRestaurantUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<userRestaurantCreateWithoutUserInput, userRestaurantUncheckedCreateWithoutUserInput>
    connectOrCreate?: userRestaurantCreateOrConnectWithoutUserInput
    upsert?: userRestaurantUpsertWithoutUserInput
    connect?: userRestaurantWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<userRestaurantUpdateWithoutUserInput, userRestaurantUncheckedUpdateWithoutUserInput>
  }

  export type userCreateNestedOneWithoutUserRestaurantInput = {
    create?: XOR<userCreateWithoutUserRestaurantInput, userUncheckedCreateWithoutUserRestaurantInput>
    connectOrCreate?: userCreateOrConnectWithoutUserRestaurantInput
    connect?: userWhereUniqueInput
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type userUpdateOneRequiredWithoutUserRestaurantInput = {
    create?: XOR<userCreateWithoutUserRestaurantInput, userUncheckedCreateWithoutUserRestaurantInput>
    connectOrCreate?: userCreateOrConnectWithoutUserRestaurantInput
    upsert?: userUpsertWithoutUserRestaurantInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutUserRestaurantInput, userUncheckedUpdateWithoutUserRestaurantInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBytesNullableFilter = {
    equals?: Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type sessionRestaurantCreateWithoutSessionInput = {
    restaurantId?: string | null
    votes?: number | null
  }

  export type sessionRestaurantUncheckedCreateWithoutSessionInput = {
    restaurantId?: string | null
    votes?: number | null
  }

  export type sessionRestaurantCreateOrConnectWithoutSessionInput = {
    where: sessionRestaurantWhereUniqueInput
    create: XOR<sessionRestaurantCreateWithoutSessionInput, sessionRestaurantUncheckedCreateWithoutSessionInput>
  }

  export type sessionUsersCreateWithoutSessionInput = {
    user: userCreateNestedOneWithoutSessionUsersInput
  }

  export type sessionUsersUncheckedCreateWithoutSessionInput = {
    userId: number
  }

  export type sessionUsersCreateOrConnectWithoutSessionInput = {
    where: sessionUsersWhereUniqueInput
    create: XOR<sessionUsersCreateWithoutSessionInput, sessionUsersUncheckedCreateWithoutSessionInput>
  }

  export type sessionRestaurantUpsertWithoutSessionInput = {
    update: XOR<sessionRestaurantUpdateWithoutSessionInput, sessionRestaurantUncheckedUpdateWithoutSessionInput>
    create: XOR<sessionRestaurantCreateWithoutSessionInput, sessionRestaurantUncheckedCreateWithoutSessionInput>
  }

  export type sessionRestaurantUpdateWithoutSessionInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionRestaurantUncheckedUpdateWithoutSessionInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionUsersUpsertWithWhereUniqueWithoutSessionInput = {
    where: sessionUsersWhereUniqueInput
    update: XOR<sessionUsersUpdateWithoutSessionInput, sessionUsersUncheckedUpdateWithoutSessionInput>
    create: XOR<sessionUsersCreateWithoutSessionInput, sessionUsersUncheckedCreateWithoutSessionInput>
  }

  export type sessionUsersUpdateWithWhereUniqueWithoutSessionInput = {
    where: sessionUsersWhereUniqueInput
    data: XOR<sessionUsersUpdateWithoutSessionInput, sessionUsersUncheckedUpdateWithoutSessionInput>
  }

  export type sessionUsersUpdateManyWithWhereWithoutSessionInput = {
    where: sessionUsersScalarWhereInput
    data: XOR<sessionUsersUpdateManyMutationInput, sessionUsersUncheckedUpdateManyWithoutSessionUsersInput>
  }

  export type sessionUsersScalarWhereInput = {
    AND?: Enumerable<sessionUsersScalarWhereInput>
    OR?: Enumerable<sessionUsersScalarWhereInput>
    NOT?: Enumerable<sessionUsersScalarWhereInput>
    sessionId?: StringFilter | string
    userId?: IntFilter | number
  }

  export type sessionCreateWithoutSessionRestaurantInput = {
    sessionId: string
    dateCreated?: Date | string | null
    sessionUsers?: sessionUsersCreateNestedManyWithoutSessionInput
  }

  export type sessionUncheckedCreateWithoutSessionRestaurantInput = {
    sessionId: string
    dateCreated?: Date | string | null
    sessionUsers?: sessionUsersUncheckedCreateNestedManyWithoutSessionInput
  }

  export type sessionCreateOrConnectWithoutSessionRestaurantInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutSessionRestaurantInput, sessionUncheckedCreateWithoutSessionRestaurantInput>
  }

  export type sessionUpsertWithoutSessionRestaurantInput = {
    update: XOR<sessionUpdateWithoutSessionRestaurantInput, sessionUncheckedUpdateWithoutSessionRestaurantInput>
    create: XOR<sessionCreateWithoutSessionRestaurantInput, sessionUncheckedCreateWithoutSessionRestaurantInput>
  }

  export type sessionUpdateWithoutSessionRestaurantInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionUsers?: sessionUsersUpdateManyWithoutSessionInput
  }

  export type sessionUncheckedUpdateWithoutSessionRestaurantInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionUsers?: sessionUsersUncheckedUpdateManyWithoutSessionInput
  }

  export type sessionCreateWithoutSessionUsersInput = {
    sessionId: string
    dateCreated?: Date | string | null
    sessionRestaurant?: sessionRestaurantCreateNestedOneWithoutSessionInput
  }

  export type sessionUncheckedCreateWithoutSessionUsersInput = {
    sessionId: string
    dateCreated?: Date | string | null
    sessionRestaurant?: sessionRestaurantUncheckedCreateNestedOneWithoutSessionInput
  }

  export type sessionCreateOrConnectWithoutSessionUsersInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutSessionUsersInput, sessionUncheckedCreateWithoutSessionUsersInput>
  }

  export type userCreateWithoutSessionUsersInput = {
    userId: number
    name?: string | null
    userRestaurant?: userRestaurantCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateWithoutSessionUsersInput = {
    userId: number
    name?: string | null
    userRestaurant?: userRestaurantUncheckedCreateNestedOneWithoutUserInput
  }

  export type userCreateOrConnectWithoutSessionUsersInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSessionUsersInput, userUncheckedCreateWithoutSessionUsersInput>
  }

  export type sessionUpsertWithoutSessionUsersInput = {
    update: XOR<sessionUpdateWithoutSessionUsersInput, sessionUncheckedUpdateWithoutSessionUsersInput>
    create: XOR<sessionCreateWithoutSessionUsersInput, sessionUncheckedCreateWithoutSessionUsersInput>
  }

  export type sessionUpdateWithoutSessionUsersInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionRestaurant?: sessionRestaurantUpdateOneWithoutSessionInput
  }

  export type sessionUncheckedUpdateWithoutSessionUsersInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    dateCreated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionRestaurant?: sessionRestaurantUncheckedUpdateOneWithoutSessionInput
  }

  export type userUpsertWithoutSessionUsersInput = {
    update: XOR<userUpdateWithoutSessionUsersInput, userUncheckedUpdateWithoutSessionUsersInput>
    create: XOR<userCreateWithoutSessionUsersInput, userUncheckedCreateWithoutSessionUsersInput>
  }

  export type userUpdateWithoutSessionUsersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userRestaurant?: userRestaurantUpdateOneWithoutUserInput
  }

  export type userUncheckedUpdateWithoutSessionUsersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userRestaurant?: userRestaurantUncheckedUpdateOneWithoutUserInput
  }

  export type sessionUsersCreateWithoutUserInput = {
    session: sessionCreateNestedOneWithoutSessionUsersInput
  }

  export type sessionUsersUncheckedCreateWithoutUserInput = {
    sessionId: string
  }

  export type sessionUsersCreateOrConnectWithoutUserInput = {
    where: sessionUsersWhereUniqueInput
    create: XOR<sessionUsersCreateWithoutUserInput, sessionUsersUncheckedCreateWithoutUserInput>
  }

  export type userRestaurantCreateWithoutUserInput = {
    restaurantId?: string | null
    vote?: Buffer | null
  }

  export type userRestaurantUncheckedCreateWithoutUserInput = {
    restaurantId?: string | null
    vote?: Buffer | null
  }

  export type userRestaurantCreateOrConnectWithoutUserInput = {
    where: userRestaurantWhereUniqueInput
    create: XOR<userRestaurantCreateWithoutUserInput, userRestaurantUncheckedCreateWithoutUserInput>
  }

  export type sessionUsersUpsertWithWhereUniqueWithoutUserInput = {
    where: sessionUsersWhereUniqueInput
    update: XOR<sessionUsersUpdateWithoutUserInput, sessionUsersUncheckedUpdateWithoutUserInput>
    create: XOR<sessionUsersCreateWithoutUserInput, sessionUsersUncheckedCreateWithoutUserInput>
  }

  export type sessionUsersUpdateWithWhereUniqueWithoutUserInput = {
    where: sessionUsersWhereUniqueInput
    data: XOR<sessionUsersUpdateWithoutUserInput, sessionUsersUncheckedUpdateWithoutUserInput>
  }

  export type sessionUsersUpdateManyWithWhereWithoutUserInput = {
    where: sessionUsersScalarWhereInput
    data: XOR<sessionUsersUpdateManyMutationInput, sessionUsersUncheckedUpdateManyWithoutSessionUsersInput>
  }

  export type userRestaurantUpsertWithoutUserInput = {
    update: XOR<userRestaurantUpdateWithoutUserInput, userRestaurantUncheckedUpdateWithoutUserInput>
    create: XOR<userRestaurantCreateWithoutUserInput, userRestaurantUncheckedCreateWithoutUserInput>
  }

  export type userRestaurantUpdateWithoutUserInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type userRestaurantUncheckedUpdateWithoutUserInput = {
    restaurantId?: NullableStringFieldUpdateOperationsInput | string | null
    vote?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type userCreateWithoutUserRestaurantInput = {
    userId: number
    name?: string | null
    sessionUsers?: sessionUsersCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutUserRestaurantInput = {
    userId: number
    name?: string | null
    sessionUsers?: sessionUsersUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutUserRestaurantInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUserRestaurantInput, userUncheckedCreateWithoutUserRestaurantInput>
  }

  export type userUpsertWithoutUserRestaurantInput = {
    update: XOR<userUpdateWithoutUserRestaurantInput, userUncheckedUpdateWithoutUserRestaurantInput>
    create: XOR<userCreateWithoutUserRestaurantInput, userUncheckedCreateWithoutUserRestaurantInput>
  }

  export type userUpdateWithoutUserRestaurantInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    sessionUsers?: sessionUsersUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateWithoutUserRestaurantInput = {
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    sessionUsers?: sessionUsersUncheckedUpdateManyWithoutUserInput
  }

  export type sessionUsersUpdateWithoutSessionInput = {
    user?: userUpdateOneRequiredWithoutSessionUsersInput
  }

  export type sessionUsersUncheckedUpdateWithoutSessionInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type sessionUsersUncheckedUpdateManyWithoutSessionUsersInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type sessionUsersUpdateWithoutUserInput = {
    session?: sessionUpdateOneRequiredWithoutSessionUsersInput
  }

  export type sessionUsersUncheckedUpdateWithoutUserInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}